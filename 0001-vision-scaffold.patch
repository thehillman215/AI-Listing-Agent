*** Begin Patch
*** Update File: package.json
@@
   "dependencies": {
+    "multer": "^1.4.5-lts.2",
     "bcryptjs": "^2.4.3",
     "better-sqlite3": "^9.6.0",
@@
   }
 }
*** End Patch
*** Begin Patch
*** Update File: .env.example
@@
+# Vision (Photo-to-Facts)
+VISION_PROVIDER=restb
+USE_PHOTO_FACTS=false
+RESTB_API_KEY=
+RESTB_BASE_URL=https://api.restb.ai
+VISION_MAX_IMAGES=10
+VISION_MIN_CONF=0.55
*** End Patch
*** Begin Patch
*** Update File: README.md
@@
+### Vision (Photo-to-Facts)
+Set `USE_PHOTO_FACTS=true` to enable the photo analyzer route.
+
+Env:
+- `VISION_PROVIDER` (default `restb`)
+- `RESTB_API_KEY` (when Restb.ai is enabled)
+- `RESTB_BASE_URL` (default `https://api.restb.ai`)
+- `VISION_MAX_IMAGES` (default `10`)
+- `VISION_MIN_CONF` (default `0.55`)
+
+API:
+- `POST /photos/analyze` — upload 1–10 images (`images` form field). Auth required. Returns rooms/features + compliance flags. Returns 400 if disabled.
*** End Patch
*** Begin Patch
*** Add File: src/middleware/upload.js
+import multer from "multer";
+
+const maxFiles = Number(process.env.VISION_MAX_IMAGES || 10);
+const storage = multer.memoryStorage();
+function fileFilter(req, file, cb) {
+  if (!/^image\/(jpeg|png)$/.test(file.mimetype)) return cb(new Error("Only JPG/PNG allowed"));
+  cb(null, true);
+}
+export const photosUpload = multer({
+  storage,
+  limits: { fileSize: 4 * 1024 * 1024, files: maxFiles },
+  fileFilter
+}).array("images", maxFiles);
*** End Patch
*** Begin Patch
*** Add File: src/vision/taxonomy.js
+export const ROOM_TYPES = [
+  "kitchen","primary_bed","bath","living","dining",
+  "exterior_front","exterior_back","yard","garage","basement","balcony","pool"
+];
+
+export const FEATURE_KEYS = [
+  "countertops_quartz","countertops_granite","flooring_hardwood","flooring_lvp","flooring_tile",
+  "appliances_stainless","island","fireplace","walk_in_closet","updated_bath","fenced_yard",
+  "deck","energy_star","new_roof","fresh_paint","pool"
+];
*** End Patch
*** Begin Patch
*** Add File: src/vision/providers/restb_stub.js
+import { ROOM_TYPES, FEATURE_KEYS } from "../taxonomy.js";
+
+const hintMap = {
+  kitchen: { room: "kitchen" },
+  bed: { room: "primary_bed" },
+  bath: { room: "bath" },
+  living: { room: "living" },
+  dining: { room: "dining" },
+  exterior: { room: "exterior_front" },
+  pool: { feature: "pool" },
+  fireplace: { feature: "fireplace" },
+  island: { feature: "island" },
+  quartz: { feature: "countertops_quartz" },
+  granite: { feature: "countertops_granite" },
+  stainless: { feature: "appliances_stainless" },
+  hardwood: { feature: "flooring_hardwood" },
+  tile: { feature: "flooring_tile" }
+};
+
+export async function analyzeStub(files) {
+  const rooms = [];
+  const features = [];
+  let people = false, text = false;
+
+  files.forEach((f, idx) => {
+    const name = (f.originalname || "").toLowerCase();
+    for (const k of Object.keys(hintMap)) {
+      if (name.includes(k)) {
+        const h = hintMap[k];
+        if (h.room && ROOM_TYPES.includes(h.room)) rooms.push({ imageIdx: idx, type: h.room, conf: 0.9 });
+        if (h.feature && FEATURE_KEYS.includes(h.feature)) features.push({ key: h.feature, conf: 0.85, imageIdx: idx });
+      }
+    }
+    if (name.includes("people") || name.includes("face")) people = true;
+    if (name.includes("watermark") || name.includes("logo") || name.includes("text")) text = true;
+  });
+
+  return { rooms, features, compliance: { people, text }, raw: { source: "stub" } };
+}
*** End Patch
*** Begin Patch
*** Add File: src/vision/index.js
+import { analyzeStub } from "./providers/restb_stub.js";
+
+export async function analyzeImages(files) {
+  // PR1: stub only. Real Restb adapter lands in PR2.
+  return analyzeStub(files);
+}
*** End Patch
*** Begin Patch
*** Update File: server.js
@@
-import { renderPdfBuffer } from "./src/export.js";
-import { sendResultsEmail } from "./src/email.js";
+import { renderPdfBuffer } from "./src/export.js";
+import { sendResultsEmail } from "./src/email.js";
+import { photosUpload } from "./src/middleware/upload.js";
+import { analyzeImages } from "./src/vision/index.js";
@@
 // JSON parser for the rest
 app.use(express.json({ limit: "1mb" }));
@@
+// --- Photos -> Analyze (flagged) ---
+const photoLimiter = rateLimit({ windowMs: 60 * 1000, max: 5 });
+app.post("/photos/analyze", photoLimiter, photosUpload, async (req, res) => {
+  try {
+    const enabled = String(process.env.USE_PHOTO_FACTS || "false") === "true";
+    if (!enabled) return res.status(400).json({ error: "Photo analysis disabled. Set USE_PHOTO_FACTS=true." });
+    const email = req.session?.user?.email || null;
+    if (!email) return res.status(401).json({ error: "Login required" });
+    const files = req.files || [];
+    if (!files.length) return res.status(400).json({ error: "No images uploaded" });
+    const results = await analyzeImages(files);
+    res.json(results);
+  } catch (e) {
+    res.status(400).json({ error: String(e) });
+  }
+});
*** End Patch
